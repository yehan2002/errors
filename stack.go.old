package errors

import "runtime"

//ErrorWithStack an error with the associated stacktrace
type ErrorWithStack interface {
	error
	Stack() []runtime.Frame
}

type stackError struct {
	err   error
	stack []uintptr
}

func (e *stackError) Stack() []runtime.Frame {
	frames := runtime.CallersFrames(e.stack)
	var validFrames []runtime.Frame
	fr, next := frames.Next()
	for next {
		validFrames = append(validFrames, fr)
		fr, next = frames.Next()
	}
}

func (e *stackError) Error() string {
	return ""
}

//Stack wraps the error with the current stacktrace
func Stack(err error) error {
	if err == nil {
		return nil
	}
	pcs := make([]uintptr, 32)
	pcs = pcs[:runtime.Callers(2, pcs)]
	return &stackError{err: err, stack: pcs}
}
